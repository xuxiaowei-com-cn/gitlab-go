# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Push Branches

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      CACHE_PATH: ~/go/pkg/mod/cache
      CGO_ENABLED: 0
      # 系统名称
      OS: ""
      # 时间
      YEAR_MONTH_DAY: ""
      YEAR_MONTH_DAY_HOUR: ""
      YEAR_MONTH_DAY_HOUR_MINUTE: ""
    strategy:
      matrix:
        os: [ "ubuntu-latest" ]

    steps:
      - name: Checkout repository（xuxiaowei-com-cn/cicd-release）
        uses: actions/checkout@v4
        with:
          repository: 'xuxiaowei-com-cn/cicd-release'

      - name: Set up Go（xuxiaowei-com-cn/cicd-release）
        uses: actions/setup-go@v4
        id: set-up-go-xuxiaowei-com-cn_cicd-release
        with:
          go-version: 1.19

      - name: Go Version（xuxiaowei-com-cn/cicd-release）
        run: go version

      - name: Go Mod Download（xuxiaowei-com-cn/cicd-release）
        run: go mod download

      - name: Go Test（xuxiaowei-com-cn/cicd-release）
        run: go test ./... -v

      - name: Go Run（xuxiaowei-com-cn/cicd-release）
        run: go run main.go

      - name: Build（xuxiaowei-com-cn/cicd-release）
        run: |
          go build -o buildinfo/buildinfo buildinfo/buildinfo.go
          GOOS=linux   GOARCH=amd64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=linux/amd64   -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=$GITHUB_RUN_NUMBER" -trimpath -o cicd-release-linux-amd64 .
          ./cicd-release-linux-amd64 --version
          ./cicd-release-linux-amd64

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        id: set-up-go
        with:
          go-version: 1.19

      - name: Cache Go modules
        uses: actions/cache@v3
        id: cache-modules
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: |
          find / -name cicd-release-linux-amd64
          echo $GITHUB_RUN_ID
          go version
          # go env -w GOPROXY=https://goproxy.cn,direct
          # go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/
          go mod download
          go test ./... -v
          go run main.go
          go build -o buildinfo/buildinfo buildinfo/buildinfo.go
          GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=windows/amd64 -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=" -trimpath -o gitlab-go-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=windows/arm64 -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=" -trimpath -o gitlab-go-windows-arm64.exe .
          GOOS=linux   GOARCH=amd64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=linux/amd64   -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=" -trimpath -o gitlab-go-linux-amd64 .
          GOOS=linux   GOARCH=arm64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=linux/arm64   -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=" -trimpath -o gitlab-go-linux-arm64 .
          GOOS=darwin  GOARCH=amd64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=darwin/amd64  -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=" -trimpath -o gitlab-go-darwin-amd64 .
          GOOS=darwin  GOARCH=arm64 go build -ldflags "-s -w -buildid= -X main.BuildDate=$(buildinfo/buildinfo now) -X main.Compiler= -X main.GitCommitBranch=$CI_COMMIT_BRANCH -X main.GitCommitSha=$(buildinfo/buildinfo commitSha) -X main.GitCommitShortSha=$(buildinfo/buildinfo commitShortSha) -X main.GitCommitTag=$(buildinfo/buildinfo commitTag) -X main.GitCommitTimestamp=$(buildinfo/buildinfo commitTimestamp) -X main.GitTreeState=$(buildinfo/buildinfo git-tree-state) -X main.GitVersion=$(buildinfo/buildinfo commitTag) -X main.GoVersion=$(buildinfo/buildinfo goShortVersion) -X main.Major= -X main.Minor= -X main.Revision= -X main.Platform=darwin/arm64  -X main.InstanceUrl=$GITHUB_SERVER_URL -X main.CiPipelineId=$GITHUB_RUN_ID -X main.CiJobId=" -trimpath -o gitlab-go-darwin-arm64 .
          ./gitlab-go-linux-amd64 --version
          ./gitlab-go-linux-amd64
          ls

      - name: Replace String Action
        uses: frabert/replace-string-action@v2
        id: replace
        with:
          pattern: '-latest$'
          string: ${{ matrix.os }}
          replace-with: ''

      - name: Set OS variable
        id: os
        run: |
          # 设置环境变量：支持 ubuntu、macos
          echo "OS=${{ steps.replace.outputs.replaced }}" >> $GITHUB_ENV
          # 设置环境变量：支持 windows
          # echo "OS=${{ steps.replace.outputs.replaced }}" >> $env:GITHUB_ENV

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: gitlab-go-${{ env.OS }}
      #     path: |
      #       gitlab-go-windows-*
      #       gitlab-go-linux-*
      #       gitlab-go-darwin-*

      - name: Get current date
        id: date
        # bash, sh, cmd, powershell, pwsh
        # shell 类型必须为 sh，否则：
        # $GITHUB_ENV：仅支持 ubuntu、macos
        # $env:GITHUB_ENV：仅支持 windows
        shell: sh
        run: |
          echo "YEAR_MONTH_DAY=$(date +'%Y-%m-%dZ')" >> $GITHUB_ENV
          echo "YEAR_MONTH_DAY_HOUR=$(date +'%Y-%m-%dT%HZ')" >> $GITHUB_ENV
          echo "YEAR_MONTH_DAY_HOUR_MINUTE=$(date +'%Y-%m-%dT%H-%MZ')" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            gitlab-go-windows-*
            gitlab-go-linux-*
            gitlab-go-darwin-*
          body:
            自动推送时的发布
          # draft: 草稿状态，为 true 时，不创建标签，默认为 false
          # draft: true
          # prerelease：是否发布预发布版，默认为 false
          prerelease: true
          name: 0.0.0-${{ env.YEAR_MONTH_DAY_HOUR_MINUTE }}
          tag: v0.0.0-${{ env.YEAR_MONTH_DAY_HOUR_MINUTE }}
          token: ${{ secrets.GITHUB_TOKEN }}
